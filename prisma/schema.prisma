// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id             String      @id @default(cuid())
  title          String
  slug           String      @unique
  description    String
  price          Int // Price in cents
  originalPrice  Int? // Original price in cents for discounts
  canvaUrl       String
  images         String[] // Array of Vercel Blob URLs
  status         ProductStatus @default(DRAFT)
  featured       Boolean     @default(false)
  tags           String[]
  features       String[]
  includes       String[]
  categoryId     String
  category       Category    @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  orders         OrderItem[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@index([status])
  @@index([featured])
  @@index([categoryId])
}

model Order {
  id                String      @id @default(cuid())
  email             String
  stripeSessionId   String?     @unique
  stripePaymentIntentId String? @unique
  status            OrderStatus @default(PENDING)
  totalAmount       Int // Amount in cents
  items             OrderItem[]
  user              User?       @relation(fields: [userId], references: [id])
  userId            String?
  downloadToken     String?     @unique
  downloadExpiry    DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([email])
  @@index([stripeSessionId])
  @@index([status])
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int      @default(1)
  price     Int // Price at time of purchase in cents
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Restrict)
  createdAt DateTime @default(now())

  @@unique([orderId, productId])
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}